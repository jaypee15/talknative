from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory
from langchain.prompts import (
    ChatPromptTemplate,
    MessagesPlaceholder,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)
from app.core.config import settings, LanguageCode

# In-memory store for conversation chains (per user_session_id and language_code)
# For MVP, user_session_id can be a simple unique ID generated by the client
# or a server-generated session ID if we implement basic session management.
# Format: session_chains[(session_id, language_code)] = ConversationChain
session_chains = {}

def get_system_prompt_template(language_code: LanguageCode) -> str:
    # This is a critical part. These prompts will define the AI's persona and teaching style.
    # Start with a basic one for Igbo. This needs significant refinement and collaboration with linguistic experts.
    if language_code == LanguageCode.IGBO:
        return (
            "You are 'Talk Native Igbo Tutor', a patient and encouraging AI language tutor for Igbo. "
            "Your primary goal is to help the user practice conversational Igbo. "
            "Use simple Igbo vocabulary and sentence structures, suitable for a beginner. "
            "When the user makes a mistake in Igbo, gently correct them and explain the correction briefly in English. "
            "If the user asks a question in English, answer it concisely in English and then try to guide them back to practicing Igbo. "
            "You can introduce new vocabulary or simple grammar concepts contextually during the conversation. "
            "Keep your responses relatively short and focused on a single learning point or conversational turn. "
            "Encourage the user to speak/type in Igbo as much as possible. "
            "If the user says 'Kedu?', respond appropriately in Igbo and ask a follow-up question in Igbo. "
            "If the user says 'bye' or 'goodbye', respond in Igbo and end the conversation politely. "
            "Focus on practical, everyday conversation topics like greetings, introductions, family, food, and basic activities."
        )
    elif language_code == LanguageCode.YORUBA: # Placeholder
        return "You are 'Talk Native Yoruba Tutor'..." # To be defined
    elif language_code == LanguageCode.HAUSA: # Placeholder
        return "You are 'Talk Native Hausa Tutor'..." # To be defined
    else: # Default/English - for testing or if language not supported yet
        return "You are a helpful assistant."


def get_chat_chain(session_id: str, language_code: LanguageCode) -> ConversationChain:
    if not settings.OPENAI_API_KEY:
        raise ValueError("OPENAI_API_KEY not configured.")

    chain_key = (session_id, language_code.value)

    if chain_key in session_chains:
        return session_chains[chain_key]

    # LLM
    llm = ChatGoogleGenerativeAI(
        temperature=0.7,
        model="models/gemini-2.0-flash",
        google_api_key=settings.GEMINI_API_KEY
    )

    # Prompt
    system_prompt_content = get_system_prompt_template(language_code)
    prompt = ChatPromptTemplate.from_messages([
        SystemMessagePromptTemplate.from_template(system_prompt_content),
        MessagesPlaceholder(variable_name="history"),
        HumanMessagePromptTemplate.from_template("{input}")
    ])

    # Memory - session-scoped for MVP
    memory = ConversationBufferMemory(return_messages=True) # `memory_key="history"` is default

    conversation = ConversationChain(
        llm=llm,
        prompt=prompt,
        memory=memory,
        verbose=True # Set to False in production unless debugging
    )
    
    session_chains[chain_key] = conversation
    return conversation

async def get_llm_response(session_id: str, language_code: LanguageCode, user_message: str) -> str:
    chain = get_chat_chain(session_id, language_code)
    # For Langchain 0.1.x, use chain.invoke
    response = await chain.ainvoke({"input": user_message})
    return response.get("response", "Sorry, I encountered an error.") # .get("response") for ConversationChain

def clear_session_chain(session_id: str, language_code: LanguageCode):
    chain_key = (session_id, language_code.value)
    if chain_key in session_chains:
        del session_chains[chain_key]
        print(f"Cleared chain for session: {session_id}, language: {language_code.value}")